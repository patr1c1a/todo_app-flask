from typing import Tuple
from typing import List
import sqlite3
from contextlib import closing


class DbManager:
    def __init__(self) -> None:
        self.db_name = "todo_app.db"

    def run_query(self, sql: str, parameters=()) -> Tuple[sqlite3.Cursor, List]:
        """
        Runs a query in the database, with the given SQL and optional parameters. Returns a tuple where the first
        element is the closed cursor (so lastrowid or rowcount can be obtained from it) and the second element is a
        list of results obtained from the fetchall() method.
        :param sql: str
        :param parameters: Tuple
        :return: Tuple
        :raises: sqlite3.Error: if database error occurs
        """
        try:
            with closing(sqlite3.connect(self.db_name)) as con, con, closing(
                con.cursor()
            ) as cur:
                cur.execute(sql, parameters)
                return cur, cur.fetchall()
        except sqlite3.Error as error:
            print("Database error: %s" % (" ".join(error.args)))
            print("Exception class is: ", error.__class__)

    def insert_task(self, task_name: str, task_status: str) -> int:
        """
        Inserts a new task in the database. Returns the autogenerated task id.
        :param task_name: str
        :param task_status: str
        :return: int
        """
        sql = "INSERT INTO tasks (name,status) VALUES (?,?)"
        params = (task_name, task_status)
        result = self.run_query(sql, params)
        return result[0].lastrowid

    def delete_task(self, task_id: int) -> int:
        """
        Deletes a task from the database matching the given id. Returns number of rows deleted (1 if task was found and
        deleted, 0 if it wasn't).
        :param task_id: int
        :return: int
        """
        sql = "DELETE FROM tasks WHERE task_id = ?"
        params = (task_id,)
        result = self.run_query(sql, params)
        return result[0].rowcount

    def list_tasks(self, status_filter: str) -> List:
        """
        Gets tasks from the database. If there's a status_filter, it returns only tasks with a matching status.
        If status_filter is None, it returns all rows in the table.
        :param status_filter: str
        :return: List
        """
        sql = "SELECT * FROM tasks"
        if status_filter:
            params = (status_filter,)
            sql += " WHERE status = ?"
            result = self.run_query(sql, params)
            return result[1]
        else:
            result = self.run_query(sql)
            return result[1]

    def update_task(self, task_id: int, status: str) -> int:
        """
        Updates the task matching the given id in the database. Returns number of rows affected (1 if task was found,
        0 if it wasn't).
        :param task_id: int
        :param status: str
        :return: int
        """
        sql = "UPDATE tasks SET status = ? WHERE task_id = ?"
        params = (status, task_id)
        result = self.run_query(sql, params)
        return result[0].rowcount
